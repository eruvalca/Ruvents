@using Services
@using Ruvents.Shared
@using System.Security.Claims

@inject NavigationManager navigation
@inject RuventService ruventService
@inject NotificationSubscriptionService notificationService
@inject IJSRuntime jsRuntime

<div class="row">
    <div class="col-12 text-center">
        <button @onclick='(() => navigation.NavigateTo("/new"))' class="btn btn-primary shadow">New Ruvent</button>
    </div>
</div>
<br />
<div class="row">
    <div class="col-2 col-md-4 text-right">
        <i @onclick="(() => GetRuventsByMonthAndYear(-1))" class="month-nav-btn fas fa-caret-left fa-3x"></i>
    </div>
    <div class="col-8 col-md-4 text-center">
        <h2>@currentMonthYear.ToString("MMMM")</h2>
        <p class="text-muted">@currentMonthYear.Year</p>
    </div>
    <div class="col-2 col-md-4 text-left">
        <i @onclick="(() => GetRuventsByMonthAndYear(1))" class="month-nav-btn fas fa-caret-right fa-3x"></i>
    </div>
</div>

<div class="row">
    @if (ruvents != null)
    {
        @foreach (var ruvent in ruvents)
        {
            <RuventCard ruvent="ruvent"></RuventCard>
        }
    }
    else
    {
        <LoadingAnimation></LoadingAnimation>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal user;
    private List<Ruvent> ruvents;
    private DateTime currentMonthYear;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        _ = RequestNotificationSubscriptionAsync();

        currentMonthYear = DateTime.Today;
        ruvents = await ruventService.GetRuventsByMonthAndYear(currentMonthYear.Month, currentMonthYear.Year);
    }

    private async Task GetRuventsByMonthAndYear(int increment)
    {
        ruvents = null;
        currentMonthYear = currentMonthYear.AddMonths(increment);
        ruvents = await ruventService.GetRuventsByMonthAndYear(currentMonthYear.Month, currentMonthYear.Year);
    }

    private async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await jsRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            subscription.Sub = user.Claims.FirstOrDefault(c => c.Type == "sub").Value;

            try
            {
                await notificationService.SubscribeToNotifications(subscription);
            }
            catch
            {
                navigation.NavigateTo("/");
            }
        }
    }
}
